pipeline {
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        skipDefaultCheckout(true)  // Skip the default checkout
    }

    stages {
        stage('Check Tag Parameter') {
            steps {
                script {
                    // Check if TAG_NAME parameter exists
                    echo "Checking for TAG_NAME parameter"
                    if (params.TAG_NAME) {
                        echo "Found TAG_NAME parameter: ${params.TAG_NAME}"
                        env.GIT_TAG = params.TAG_NAME
                    } else {
                        echo "No TAG_NAME parameter found, will check Git tags"
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    // If we have a TAG_NAME parameter, check out that specific tag
                    if (env.GIT_TAG) {
                        echo "Checking out specific tag: ${env.GIT_TAG}"
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: "refs/tags/${env.GIT_TAG}"]],
                            extensions: [
                                [$class: 'CloneOption', noTags: false, shallow: false, depth: 0, reference: '']
                            ],
                            userRemoteConfigs: [[
                                url: 'https://github.com/adriandy89/learn-jenkins-app.git'
                            ]]
                        ])
                    } else {
                        // Otherwise check out main and look for tags
                        echo "Checking out main branch and looking for tags"
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: 'refs/heads/main']],
                            extensions: [
                                [$class: 'CloneOption', noTags: false, shallow: false, depth: 0, reference: '']
                            ],
                            userRemoteConfigs: [[
                                url: 'https://github.com/adriandy89/learn-jenkins-app.git',
                                refspec: '+refs/heads/main:refs/remotes/origin/main +refs/tags/*:refs/tags/*'
                            ]]
                        ])
                    }
                    
                    // Fetch tags explicitly
                    sh "git fetch --tags"
                    sh "git tag -l"
                }
            }
        }
        
        stage('Extract Tag Info') {
            when {
                expression { !env.GIT_TAG }
            }
            steps {
                script {
                    // Debug info
                    echo "JENKINS_URL: ${env.JENKINS_URL}"
                    echo "BUILD_URL: ${env.BUILD_URL}"
                    echo "JOB_NAME: ${env.JOB_NAME}"
                    echo "BUILD_TAG: ${env.BUILD_TAG}"
                    
                    // Get the commit we're building
                    def gitCommit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                    echo "Current commit: ${gitCommit}"
                    
                    // Find tags pointing to this commit
                    def allTags = sh(script: "git tag --points-at ${gitCommit}", returnStdout: true).trim()
                    echo "All tags on this commit: ${allTags}"
                    
                    // Now check if any of the tags start with 'develop-'
                    def hasDevTag = false
                    def developTag = ""
                    
                    if (allTags) {
                        allTags.split('\n').each { tag ->
                            if (tag.startsWith('develop-')) {
                                hasDevTag = true
                                developTag = tag
                            }
                        }
                    }
                    
                    // If no develop tag was found, abort
                    if (!hasDevTag) {
                        currentBuild.result = 'ABORTED'
                        error "This pipeline only runs for 'develop-*' tags. No such tag found on the current commit."
                    }
                    
                    // Store the tag for later use
                    env.GIT_TAG = developTag
                    echo "Valid develop tag found: ${env.GIT_TAG}"
                }
            }
        }

        stage('Validate Tag Format') {
            steps {
                script {
                    // Ensure we have a GIT_TAG and validate its format
                    if (!env.GIT_TAG) {
                        error "No tag was found or specified"
                    }
                    
                    if (!env.GIT_TAG.startsWith('develop-')) {
                        error "This pipeline only runs for 'develop-*' tags. Found: ${env.GIT_TAG}"
                    }
                    
                    echo "Validated tag format: ${env.GIT_TAG}"
                }
            }
        }

        stage('Build') {
            steps {
                echo "Building from tag: ${env.GIT_TAG}"
                // Aqu√≠ haces tu build, test, etc.
            }
        }

        stage('Deploy to Remote') {
            steps {
                echo "Deploying to remote server using tag: ${env.GIT_TAG}"
                sshagent(credentials: ['ubuntu-server-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@212.227.194.20 '
                            cd /home/ubuntu/apps/test-app/ && \
                            git -C learn-jenkins-app fetch --all --tags && \
                            git -C learn-jenkins-app checkout ${env.GIT_TAG} && \
                            docker compose up -d --build --force-recreate --no-deps && \
                            docker image prune -af --filter "until=24h" && \
                            docker image ls -q -f "dangling=true" | xargs -r docker rmi
                        '
                    """
                }
            }
        }
    }

    post {
        aborted {
            echo "Build aborted: This pipeline only runs for 'develop-*' tags."
        }
        failure {
            echo "Build failed! Check the logs for more information."
        }
        success {
            echo "Build completed successfully for tag: ${env.GIT_TAG}"
        }
    }
}